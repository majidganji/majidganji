<?php

namespace backend\models;

use common\models\Admin;
use Intervention\Image\ImageManager;
use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "{{%articles}}".
 *
 * @property integer $id
 * @property integer $editor_id
 * @property integer $category_id
 * @property string $title
 * @property string $body
 * @property string $image
 * @property string $slug
 * @property integer $status
 * @property integer $created_at
 *
 * @property Admin $editor
 * @property Categories $category
 */
class Articles extends \yii\db\ActiveRecord {

    public $oldImage;

    public static function tableName() {
        return '{{%articles}}';
    }

    public function rules() {
        return [
            [['editor_id', 'category_id', 'title', 'body', 'slug', 'created_at'], 'required'],
            [['editor_id', 'category_id', 'status', 'created_at'], 'integer'],
            [['body'], 'string'],
            [['title', 'slug'], 'string', 'max' => 255],
            [['slug'], 'unique'],
            [
                ['editor_id'],
                'exist',
                'skipOnError' => TRUE,
                'targetClass' => Admin::className(),
                'targetAttribute' => ['editor_id' => 'id']
            ],
            [
                ['category_id'],
                'exist',
                'skipOnError' => TRUE,
                'targetClass' => Categories::className(),
                'targetAttribute' => ['category_id' => 'id']
            ],
            [['image'], 'required', 'on' => 'create'],
            [['image'], 'file', 'extensions' => 'png, jpg'],
            [['status'], 'in', 'range' => [0, 10]],
        ];
    }

    public function attributeLabels() {
        return [
            'id' => 'ID',
            'editor_id' => 'نویسنده',
            'category_id' => 'دسته‌بندی',
            'title' => 'عنوان',
            'body' => 'متن',
            'image' => 'تصویر',
            'slug' => 'مسیر',
            'status' => 'وضعیت',
            'created_at' => 'زمان درج',
        ];
    }

    public function getEditor() {
        return $this->hasOne(Admin::className(), ['id' => 'editor_id']);
    }

    public function getCategory() {
        return $this->hasOne(Categories::className(), ['id' => 'category_id']);
    }

    public function beforeValidate() {
        $this->image = UploadedFile::getInstance($this, 'image');

        return parent::beforeValidate();
    }

    public function beforeSave($insert) {
        $this->initSlug();
        if (!empty($this->image)) {
            $this->upload();
        }
        if (!$this->isNewRecord && empty($this->image)) {
            $this->image = $this->oldImage;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    private function initSlug(){
        $slug = preg_replace('/ /', '-', $this->slug);
        $slug = preg_replace('/-{1,}/', '-', $slug);
        $this->slug = preg_replace('(^-|-$)', '', $slug);
    }

    private function upload() {
        $path = Yii::getAlias('@frontend/web/photos/');
        $fullname = time() . Yii::$app->security->generateRandomString(15) . '.' . $this->image->extension;
        $image = new ImageManager();
        $image->make($this->image->tempName)->resize(823, 515)->save($path . $fullname);
        $this->image =  $fullname;
        if (!$this->isNewRecord && !empty($this->oldImage)) {
            unlink($path . $this->oldImage);
        }
    }

    public function getComments(){
        return $this->hasMany(Comment::className(), ['post_id' => 'id']);
    }
}
